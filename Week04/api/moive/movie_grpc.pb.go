// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package moive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MoiveServiceClient is the client API for MoiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoiveServiceClient interface {
	// Search 搜索电影
	Search(ctx context.Context, in *MoiveRequest, opts ...grpc.CallOption) (*MoiveResponse, error)
}

type moiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoiveServiceClient(cc grpc.ClientConnInterface) MoiveServiceClient {
	return &moiveServiceClient{cc}
}

func (c *moiveServiceClient) Search(ctx context.Context, in *MoiveRequest, opts ...grpc.CallOption) (*MoiveResponse, error) {
	out := new(MoiveResponse)
	err := c.cc.Invoke(ctx, "/sky.moive.v1.MoiveService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoiveServiceServer is the server API for MoiveService service.
// All implementations must embed UnimplementedMoiveServiceServer
// for forward compatibility
type MoiveServiceServer interface {
	// Search 搜索电影
	Search(context.Context, *MoiveRequest) (*MoiveResponse, error)
	mustEmbedUnimplementedMoiveServiceServer()
}

// UnimplementedMoiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoiveServiceServer struct {
}

func (UnimplementedMoiveServiceServer) Search(context.Context, *MoiveRequest) (*MoiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMoiveServiceServer) mustEmbedUnimplementedMoiveServiceServer() {}

// UnsafeMoiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoiveServiceServer will
// result in compilation errors.
type UnsafeMoiveServiceServer interface {
	mustEmbedUnimplementedMoiveServiceServer()
}

func RegisterMoiveServiceServer(s grpc.ServiceRegistrar, srv MoiveServiceServer) {
	s.RegisterService(&_MoiveService_serviceDesc, srv)
}

func _MoiveService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoiveServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sky.moive.v1.MoiveService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoiveServiceServer).Search(ctx, req.(*MoiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MoiveService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sky.moive.v1.MoiveService",
	HandlerType: (*MoiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _MoiveService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie.proto",
}
